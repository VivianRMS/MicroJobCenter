job-service.url=http://job:8082
company-service.url=http://company:8081
review-service.url=http://review:8083

spring.application.name=job-service
server.port=8082

# H2 Database
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#spring.jpa.show-sql= true
#spring.jpa.hibernate.ddl-auto=update

#PostgreSQL
spring.datasource.url=jdbc:postgresql://postgres:5432/job
spring.datasource.username=vivianrms
spring.datasource.password=password
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql= true
spring.jpa.hibernate.ddl-auto=create-drop
#specify which dialect(configuration of SQL generation) to use
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#Eureka
eureka.client.service-url.defaultZone=http://servicereg:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

#Zipkin
#trace each and every request
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
management.tracing.sampling.probability=1.0

#Config Server
spring.config.import=optional:configserver:http://configserver:8080

# Resilience4J
# Register a health indicator for companyBreaker circuit breaker
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
# Define the number of calls stored in the sliding window of the circuit breaker and is used generally to calculate the percentage of failure rate.
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
# Define number of calls that can be recorded before the circuit breaker can calculate failure rate.
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=5
# Define the number of calls that can be permitted in the half-open state.
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
# Controls how long the circuit breaker should stay in open state.
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=10s
# Define the threshold. When exceeded, the circuit breaker will transition to open.
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
# Register health indicator in actuator.
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
# Enable circuit breaker to automatically transition from open to half open state.
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
# Define the type of the sliding window. count_based means that the last n calls are recorded and are used to calculate failure rates.
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

resilience4j.retry.instances.companyBreaker.max-attempts=5
resilience4j.retry.instances.companyBreaker.wait-duration=2s

# If more calls happen, they will be immediately rejected because the wait time here is defined as 0
resilience4j.ratelimiter.instances.companyBreaker.timeout-duration=0s
# Allow 2 calls every 4 seconds
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-period=4s
resilience4j.ratelimiter.instances.companyBreaker.limit-for-period=2

# Actuator configuration
# Enable health check for the circuit breakers.
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always